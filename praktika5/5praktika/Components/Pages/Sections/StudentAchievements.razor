@page "/profile/studentachievements"
@rendermode InteractiveServer

<PageTitle>Мои достижения</PageTitle>

@using _5praktika.Models.Entities
@using _5praktika.Data
@using System.Security.Claims
@inject AppDbContext appDbContext
@attribute [Authorize]

<h3>Личные достижения</h3>
<div style="display:flex; flex-direction: row; column-gap:40px">
<div class="mb-3">
    <label for="dateSort">Сортировать по дате:</label>
    <select id="dateSort" @bind="@dateSortDirection" @oninput="SortAchievements">
        <option value="desc">Сначала новые</option>
        <option value="asc">Сначала старые</option>
    </select>
</div>

<div class="mb-3">
    <label for="typeFilter">Вид достижения:</label>
    <select id="typeFilter" @bind="@typeFilter" @oninput="SortTypes">
        <option value="">Все</option>
        <option value="Учеба">Учеба</option>
        <option value="Спорт">Спорт</option>
        <option value="Наука">Наука</option>
    </select>
</div>
</div>
@* <div class="mb-3">
    <button class="btn btn-primary" @onclick="LoadAchievements">Применить фильтр</button>
</div>
 *@

@if (achievements != null && achievements.Any())
{
    <table class="table" style="margin-top: 2em">
        <thead>
            <tr>
                <th>Дата</th>
                <th>Вид</th>
                <th>Описание</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var achievement in achievements)
            {
                <tr>
                    <td>@achievement.AchievementDate</td>
                    <td>@achievement.AchievementType</td>
                    <td>@achievement.Description</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Достижений нет</p>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private List<Achievement> achievements;
    private Student student;
    private DateTime? dateFilter;
    private string typeFilter = "";
    private string dateSortDirection = "asc";

    protected override async Task OnInitializedAsync()
    {
        await getStudentId();
        LoadAchievements();
    }

    private async Task getStudentId()
    {
        var authenticationState = await authenticationStateTask;
        var username = authenticationState.User.Identity.Name;
        student = appDbContext.Students.FirstOrDefault(s => s.Username == username);
    }

    private void SortAchievements(ChangeEventArgs e)
    {
        dateSortDirection = e.Value.ToString();
        LoadAchievements();
    }

    private void SortTypes(ChangeEventArgs e)
    {
        typeFilter = e.Value.ToString();
        LoadAchievements();
    }

    private void LoadAchievements()
    {
        Console.WriteLine("typeFilter", typeFilter);
        if (student != null)
        {
            IQueryable<Achievement> query = appDbContext.Achievements
                                                             .Where(a => a.StudentId == student.StudentId);

            if (dateFilter.HasValue)
            {
                var selectedDate = dateFilter.Value.Date; 
                query = query.Where(a => a.AchievementDate.Date >= selectedDate);
            }

            if (dateSortDirection == "asc")
            {
                query = query.OrderBy(a => a.AchievementDate);
            }
            else
            {
                query = query.OrderByDescending(a => a.AchievementDate);
            }

            if (!string.IsNullOrEmpty(typeFilter))
            {
                query = query.Where(a => a.AchievementType == typeFilter);
            }

            achievements = query.ToList();
        }
    }

    private string GetLabelForAchievementType(string achievementType)
    {
        switch (achievementType)
        {
            case "Учеба":
                return "У";
            case "Спорт":
                return "С";
            case "Наука":
                return "Н";
            default:
                return "";
        }
    }

}
<style>
    table {
        border: #01ADED;
    }
    select {
        padding: 5px 8px;
        border-radius: 20px;
    }
</style>